/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libNEPCM.so"
)

application     chtPCMNEPCMSimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          0.01;

writeControl    timeStep;

writeInterval   100;

purgeWrite      3;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
{
    postProcessSquare
    {
        functionObjectLibs    ("libutilityFunctionObjects.so");
        type                  coded;
        name                  postProcessSquare;
        region                square;
        enabled               true;
        outputControl         outputTime;//timeStep
        redirectType          postProcessSquare;

        code
        #{
            std::ofstream output;
            output.open("postProcessSquare.txt",std::ofstream::app);

            //- lookup fields
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            const fvMesh& mesh = T.mesh();
            const scalarField& volumeCell = mesh.V();

            //- find id and compute heat flux
            scalar avgT_ = fvc::domainIntegrate(T).value()/sum(volumeCell);
            scalar maxT_ = gMax(T);

            scalar t_ = T.mesh().time().value();
            scalar deltaT_ = T.mesh().time().deltaT().value();

            output << "Average temperature: " << avgT_ << "\n";
            output << "Maximum temperature: " << maxT_ << "\n";
            output.close();
        #};
    }
}

// ************************************************************************* //
